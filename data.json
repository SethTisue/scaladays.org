{
    "Day1": {
        "id": "june-16",
        "title": "Monday June 16th",
        "time": "16:00-21:00",
        "tracks": [
            {
                "type": "pause",
                "style": "register",
                "title": "Registration Open",
                "time": "16:30-18:00",
                "extra": "<h4>&amp; Reception in foyer</h4>"
            },
            {
                "type": "keynote",
                "title": "Keynote: Scala with Style",
                "description": "",
                "time": "18:00-19:30",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Martin Odersky",
                        "avatar": "assets/images/speakers/martin.jpg",
                        "company": "EPFL & Typesafe Inc",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "pause",
                "style": "drink",
                "title": "After Party At Kosmos",
                "time": "19:30-22:00",
                "extra": ""
            }
        ]
    },
    "Day2": {
        "id": "june-17",
        "title": "Tuesday June 17th",
        "time": "08:00-21:00",
        "tracks": [
            {
                "type": "pause",
                "style": "register",
                "title": "Registration Open<br><span>&amp; Breakfast in foyer</span>",
                "time": "08:00-09:00",
                "extra": ""
            },
            {
                "type": "keynote",
                "title": "Keynote: Reactive Scala",
                "description": "",
                "time": "09:00-10:00",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Erik Meijer",
                        "avatar": "assets/images/speakers/erik.png",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Reactive Streams: And why you should care.",
                "room": 1,
                "time": "10:05-11:00",
                "description": "\n\n<p>One of the fundamental problems of I/O is a core problem of communication: </p>How do I know that the recipient is ready to receive my information?<p></p>\n<p>In a pure push model, without taking into consideration Little's Law, it is very easy to produce data at a faster pace than it can be consumed, leading to loss of information, contention on the medium, or even full system failure.</p>\n<p>Reactive Streams provide an asynchronous, concurrent, back-pressured/demand-driven solution for that and other problems—as will be demonstrated in this session.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Viktor Klang",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Quote or be quoted",
                "time": "10:05-11:00",
                "room": 2,
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@den_sh",
                        "fullname": "Denys Shabalin",
                        "avatar": "assets/images/speakers/shabalin.jpg",
                        "company": "Typesafe Inc",
                        "bio": "Denys is the author of Scala 2.11's quasiquotes, a project aimed at making AST manipulation a pleasure. He is also an active contributor to scala/scala repository, hacking on compiler internals, reflection API and macros. At the moment he works as intern at Typesafe researching ways to introduce referential transparency and hygiene concepts to Scala compiler and macro system."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Solving Data Analytics Problems with Delite",
                "room": 3,
                "time": "10:05-11:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Kevin Brown",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Workshop #1",
                "time": "10:05-11:00",
                "room": 4,
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": []
            },
            {
                "type": "track",
                "title": "Catalyst: A Functional Query Optimizer for Spark and Shark",
                "room": 1,
                "time": "11:05-12:00",
                "description": "\n\n<p>Shark is a SQL engine built on Apache Hive, that replaces Hive’s MapReduce execution engine with Apache Spark.  Spark’s fine-grained resource model and efficient execution engine allow Shark to outperform Hive by over 100x for data stored in memory. However, until now, Shark’s performance has been limited by the flexibility of Hive’s query optimizer.  Catalyst aims to remedy this situation by building a simple yet powerful optimization framework using Scala language features.</p>\n<p>Query optimization can greatly improve both the productivity of developers and the performance of the queries that they write.  A good query optimizer is capable of automatically rewriting relational queries to execute more efficiently, using techniques such as filtering data early, utilizing available indexes, and even ensuring different data sources are joined in the most efficient order.  By performing these transformations, the optimizer not only improves the execution times of relational queries, but also frees the developer to focus on the semantics of their application instead of its performance.  </p>\n<p>Unfortunately, building an optimizer is an incredibly complex engineering task and thus many open source systems perform only very simple optimizations.  Past research [1,2] has attempted to combat this complexity by providing frameworks that allow the creators of optimizers to write possible optimizations as a set of declarative rules.  However, the use of such frameworks has required the creation and maintenance of special “optimizer compilers” and forced the burden of learning a complex domain specific language upon those wishing to add features to the optimizer. </p>\n<p>Catalyst solves this problem by leveraging Scala’s powerful pattern matching and runtime reflection. This framework allows developers to concisely specify complex optimizations, such as pushing filters past joins functionally.  Increased conciseness allows our developers both to create new optimizations faster and more easily reason about the correctness of the optimization.</p>\n<p>Catalyst also uses the new reflection capabilities in Scala 2.10 to generate custom classes at runtime for storing intermediate results and evaluating complex relational expressions.  Doing so allows us to avoid boxing of primitive values and has been shown to improve performance by orders of magnitude in some cases.</p>\n<p>[1]  Graefe, G. The Cascades Framework for Query Optimization. In Data Engineering Bulletin. Sept. 1995.<br>\n[2] Goetz Graefe , David J. DeWitt, The EXODUS optimizer generator, Proceedings of the 1987 ACM SIGMOD international conference on Management of data, p.160-172, May 27-29, 1987, San Francisco, California, United States</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Michael Armbrust",
                        "avatar": "",
                        "company": "Databricks",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "JScala - write your JavaScript in Scala",
                "room": 2,
                "time": "11:05-12:00",
                "description": "\n\n<p>JScala is a Scala macro that produces JavaScript from Scala code. I'll present JScala features, including client-server code sharing via @Javascript annotation, macro-based TypeScript definitions import via @Typescripted annotation, automatic macro-based toJson/fromJson serialization and browser Tetris example.</p>\n    <p>Additionally, I'll talk about further plans, Lift/Play integration and popular JavaScript libraries (jQuery, Angular.js)support.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Alexander Nemish",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Good to Great: IntelliJ IDEA and Scala",
                "room": 3,
                "time": "11:05-12:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Alexander Podkhalyuzin",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Workshop or Sponsor",
                "room": 4,
                "time": "11:05-12:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": []
            },
            {
                "type": "pause",
                "style": "eat",
                "title": "Lunch",
                "time": "12:00-13:00",
                "extra": ""
            },
            {
                "type": "track",
                "title": "Composable application architecture with reasonably priced monads",
                "room": 1,
                "time": "13:00-13:55",
                "description": "\n\n<p>Most of us have an experience of functional programming that is isolated to small libraries or specific immutable data structures. But can we design our entire application architecture in a purely functional way? Can we do \"aspect-oriented\" programming with cross-cutting concerns that are compositional and checked by the type system? Yes we can, and in this talk we will look at a conceptually simple recipe for making that happen. We will see that the best things in Scala are Free.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@runarorama",
                        "fullname": "Rúnar Bjarnason",
                        "avatar": "assets/images/speakers/runar.jpg",
                        "company": "Runar",
                        "bio": "Runar is an independent software developer, co-author of \"Functional Programming in Scala\" (Manning, 2014), and a functional programming extremist."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Building a 3D Multiplayer Game with Play, Akka, and THREE.js",
                "room": 2,
                "time": "13:00-13:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Kevin Hoffman",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Scalding - the not-so basics",
                "room": 3,
                "time": "13:00-13:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@ktosopl",
                        "fullname": "Konrad Malawski",
                        "avatar": "assets/images/speakers/malawski.jpg",
                        "company": "Ebay",
                        "bio": "Late-night passionate dev currently at ebay in London - where he's working hard for a more Scala Future[_]. Fan of type systems and capybaras."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Learn you an SBT for fun and profit!",
                "room": 4,
                "time": "13:00-13:55",
                "description": "\n\n<p>SBT has been the subject of quite a bit of controversy among Scala developers. It's different enough from other build tools that not everyone has the patience of really getting into it. As a natural consequence, they tend to either go back to the build tools they know or employ SBT in a way that is similar to what they are used to and doesn't require them to fully understand it.</p>\n<p>While it is possible to build your projects with only a minimal comprehension of SBT, there is a lot to gain from  really understanding how it works. If you are one of the people who have never gone a lot further than \"sbt test\", this talk is for you. </p>\n<p>You will learn how it can make your daily Scala development workflow more productive. We'll dive into the concepts behind SBT and see how we can embrace its interactive shell, how to customise our build to our needs, and what the SBT ecosystem of plugins has to offer to improve our development workflow.</p>\n<p>This talk will involve a lot of live SBT interaction, and also some coding. At the end of the talk, we will  have seen not only what SBT and the existing ecosystem has to offer, but also built our own little SBT plugin.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@kaffeecoder",
                        "fullname": "Daniel Westheide",
                        "avatar": "assets/images/speakers/westheide.jpg",
                        "company": "innoQ Deutschland GmbH",
                        "bio": "Daniel has been doing FP on the JVM for several years. He published \"The Neophyte's Guide to Scala\" and works as a consultant at innoQ."
                    }
                ]
            },
            {
                "type": "track",
                "title": "akka-http: (un)REST for your Actors",
                "room": 1,
                "time": "14:00-14:55",
                "description": "\n\n<p>The new akka-http module, the successor of spray.io, provides a fast and fully-featured client- and server-side HTTP stack. It allows you to easily build REST/HTTP-based integration layers for connecting your Scala applications to the world.</p>\n<p>In this session we'll look into what akka-http brings to the table, how it is used and where it will add the most value in your overall application architecture.</p>\n<p>Plenty of code examples will highlight the various client- and server-side APIs as well as give you an idea for what \"RESTful\" programming with akka-http looks like.</p>\n<p>We'll also talk about the improvements it brings over spray and what is on the agenda regarding the transition from Netty to akka-http as the HTTP \"driver\" for the Play framework.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Mathias Doenitz",
                        "avatar": "",
                        "company": "Typesafe Inc",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "The Trouble with Tests",
                "room": 2,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Bill Venners",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Fun Functional-Reactive Programming with Scala.Rx",
                "room": 3,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "fullname": "Li Haoyi",
                        "avatar": "assets/images/speakers/haoyi.jpg",
                        "company": "Dropbox",
                        "bio": "Haoyi is a software engineer at Dropbox who writes Python and Coffeescript during the day and Scala and ScalaJS at night."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Sponsor Session",
                "room": 4,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": []
            },
            {
                "type": "track",
                "title": "Sparkle: scala + d3.  Reactive streams for data visualization in the browser",
                "room": 1,
                "time": "15:00-15:55",
                "description": "\n\n<p>In this talk I'll introduce sparkle, an open source framework for data visualization.  Sparkle combines the snazzy animation facilities in d3 with the powerful data management and analysis primitives in Scala.  The current version of sparkle is oriented towards analyzing time series data.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "???---Lee Mighdoll---can we display????",
                        "avatar": "",
                        "company": "Nest",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Macros for the Rest of Us",
                "room": 2,
                "time": "15:00-15:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Dave Gurnell",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Lightning-Fast Standard Collections With ScalaBlitz",
                "room": 3,
                "time": "15:00-15:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Alexandar Prokopec",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Scala code quality assurance - SCCT",
                "room": 4,
                "time": "15:00-15:55",
                "description": "\n\n<p>When working in teams, the best way to keep an eye on code quality is to setup an automated process of quality assurance. </p>\n<p>In this talk I'll introduce SCCT (Scala code coverage tool) and explain how Jenkins or Travis can be used to assist you in the integration of new changes and their deployment.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Roch Delsalle",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "When Code Reacts to Data",
                "room": 1,
                "time": "16:00-16:55",
                "description": "\n\n<p>Data these days: there's a crapton of it, and a lot of it is crap. Can we get just-in-time processing AND secure error handling AND a modular flexibility like OO has never seen?\n</p><p>Welcome to a new world of data streaming. Multiple sources -- asynchronous, isolated I/O -- on-the-fly decisions: we have it all!</p>\n<p>This talk introduces scalaz-stream, with code that modifies its flow at runtime. This library showcases Scala's talents with a productively lazy, reassuringly safe, purely functional style. And modularity! I think code re-use is overrated, except like this. In this session, be on the watch for advanced FP patterns disguised in ordinary English. You may never think about richly decadent type systems the same way again.\"</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@jessitron",
                        "fullname": "Jessica Kerr",
                        "avatar": "assets/images/speakers/kerr.jpg",
                        "company": "",
                        "bio": "Jessica Kerr writes Scala code and speaks at conferences. She loves abstraction, git, her children, and anything that makes her brain hurt."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Using the Scalatest Selenium DSL - an introduction and return on experience",
                "room": 2,
                "time": "16:00-16:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Matthew Farwell",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "BirdWatch",
                "room": 3,
                "time": "16:00-16:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@matthiasnehlsen",
                        "fullname": "Matthias Nehlsen",
                        "avatar": "assets/images/speakers/nehlsen.jpg",
                        "company": "",
                        "bio": "Matthias Nehlsen is a freelance software engineer currently working with Scala, Akka and Play. He's also blogging at  matthiasnehlsen.com."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Simplifying Scala — The Past, Present and Future",
                "room": 4,
                "time": "16:00-16:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Simon Ochsenreither",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Spores: Towards Function-Passing Style in the Age of Concurrency and Distribution",
                "room": 1,
                "time": "17:00-17:55",
                "description": "\n\n<p>Functional programming (FP) is regularly touted as the way forward for bringing parallel, concurrent, and distributed programming to the mainstream. The popularity of the rationale behind this viewpoint (immutable data transformed by function application) has even lead to a number of object-oriented (OO) programming languages adopting functional features such as lambdas (functions) and thereby function closures. However, despite this established viewpoint of FP as an enabler, reliably distributing function closures over a network, or using them in concurrent environments nonetheless remains a challenge across FP and OO languages. </p><p>This talk presents an approach for more principled distributed and concurrent programming by introducing a new closure-like abstraction and type system, called spores, that can guarantee closures to be serializable, thread-safe, or even have general, custom user-defined properties. Crucially, our system is based on the principle of encoding type information corresponding to captured variables in the type of a spore. We'll see the power of the guarantees that this safe foundation for migratable closures facilitates through a case analysis touching upon several real-world frameworks such as Akka and Spark.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Heather Miller",
                        "avatar": "",
                        "company": "EPFL",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Why Scala is Taking Over the Big Data World",
                "room": 2,
                "time": "17:00-17:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@deanwampler",
                        "fullname": "Dean Wampler",
                        "avatar": "assets/images/speakers/wampler.jpg",
                        "company": "Typesafe Inc",
                        "bio": "Dean Wampler works for Typesafe. He's a \"Big Data\" specialist and the author of several books including \"Programming Scala\" (O'Reilly)."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Effective APIs",
                "room": 3,
                "time": "17:00-17:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Josh Suereth",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Conquering Scala's Confundus Charm",
                "room": 4,
                "time": "17:00-17:55",
                "description": "\n\n<p>Also known as: The beginners guide to starting a Scala project.</p>\n<p>Starting a Scala project should be easy, but with a Simple Build Tool that appears anything but whats the best way to get started and stay sure footed?</p>\n<p>In this beginners talk we'll help get you up and running quickly and well on the road to success. In five simple steps you'll be able to release your code to the wild, safe in the knowledge you've set up a good foundation to build upon.</p>\n<p>The 5 Steps to a happy project:</p>\n<ol>\n  <li>Simple Build Tool (SBT)<br>\n     Having a build tool is core to getting started, so let SBT do the work for you.  You might not find it simple, but it doesn't have to be complex.</li>\n  <li>Console management.<br>\n     Mastering the REPL is the key to quick debugging / testing of code.</li>\n  <li>Testing<br>\n     You need to know your code works and recent changes haven't broken anything.  As with any modern language theres a wealth of choice and we'll have a quick look at most popular two: ScalaTest, Specs2</li>\n  <li>Checks and Balances<br>\n     Just because your test suite is green doesn't mean your code is any good. Using ScalaCheck you can conform to style and JaCoC will show you code that is missing tests.</li>\n  <li>Publishing<br>\n     Now your code is tested, how do you publish it and share with the world? We'll look at how to set up SBT to publish your code.</li>\n</ol>\n            ",
                "speakers": [
                    {
                        "twitter": "@RossC0",
                        "fullname": "Ross Lawley",
                        "avatar": "assets/images/speakers/ross.jpg",
                        "company": "MongoDB",
                        "bio": "Ross is a Scala Engineer based in London for MongoDB. A relative newcomer to Scala, Ross jumped the dynamic / static language divide after taking the Functional Programming Principles in Scala course. With over 10 years experience developing web applications Ross holds a deep passion for agile web development. Previously, Ross was the Software Architect for Streetlife and prior to that was the technical lead for Europes largest commercial radio station owner - Global Radio Ltd."
                    }
                ]
            },
            {
                "type": "pause",
                "style": "drink",
                "title": "Hospitality Suites at Kosmos and Community Party",
                "time": "18:00-22:00",
                "extra": ""
            }
        ]
    },
    "Day3": {
        "id": "june-18",
        "title": "Wednesday June 18th",
        "time": "08:00-18:00",
        "tracks": [
            {
                "type": "pause",
                "style": "register",
                "title": "Registration Open",
                "time": "08:00-09:00",
                "extra": "<h4>&amp; Breakfast in foyer</h4>"
            },
            {
                "type": "keynote",
                "title": "Keynote - Need Title",
                "time": "09:00-10:00",
                "description": "",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Chad Fowler",
                        "avatar": "assets/images/speakers/fowler.png",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Serious Fun With Scala",
                "room": 1,
                "time": "10:05-11:00",
                "description": "\n\n<p>The power of Scala keeps showing up in expected--and unexpected--places. In this talk, I will share how I used Scala in bioinformatics, neuroscience, online games, mobile applications, and desktop applications. </p>\n<p>In bioinformatics, the beauty of Scala really shines. Thanks to the abstraction in the Scala collection framework, creating collection types for DNA, RNA, and Protein Chains is super easy. With the proper collections at my disposal, I was able to implement algorithms such as Sequence Alignment, Genome Assembly, and Gibbs Sampling by focusing on the core ideas of the algorithm and not on the nitty-gritty details. On the top of it, Scala makes dynamic programming, which is fundamental in many bioinformatics algorithms, easy to implement and understand. </p>\n<p>Last year, I talked about using brainwaves to play games. Since then, I have taken things up a notch and started working to solve more practical problems such as maintaining attention while performing tasks (something that my age group suffers from a lot). This exposed me to a whole new and exciting world of Digital Signal Processing. This project benefited a lot from Reactive programming techniques in cleaning my code and making it more reliable.</p>\n<p>Not to be outdone by the serious work of algorithms, I took the desktop version of Collidium and converted it to an online HTML5 Game using Scala.js. I have also improved my Android game, Wordsteal. I even used Scala with Swing to save a few bucks for our budget-starved Student Store by creating a simple cash register application.</p>\n<p>In this talk, I will share many interesting techniques I learned and convey why I continue to be a huge fan of Scala. See you there!</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@ShadajL",
                        "fullname": "Shadaj Laddad",
                        "avatar": "assets/images/speakers/shadajl.png",
                        "company": "",
                        "bio": "Shadaj is a 14 year old, who loves to program. He has programmed in Logo, NXT Mindstorms, Ruby, Python, C, Java, and Scala—his favorite. Shadaj hosts his projects on GitHub, and has a channel on Youtube. He has presented at Scala Days 2013, Scala Days 2012, and the Bay Area Scala Enthusiast group showing his Scala projects. Besides programming, he likes Math and Science. In addition, he is also an active member of his school community as Student Council President. Shadaj loves spreading his love of technology and started TechTalks—a program that brings guest speakers to share their knowledge and enthusiasm with students at his school. When not doing his school work or programming, he plays guitar, sitar, and games, some of which he created."
                    }
                ]
            },
            {
                "type": "track",
                "title": "The Raspberry Pi Akka Supercomputer",
                "room": 2,
                "time": "10:05-11:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Stephen Chin",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    },
                    {
                        "twitter": "@do\n<span>\n  e</span>",
                        "fullname": "e",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Building a DBMS in Scala or how types can turn a SQL interpreter into a SQL compiler",
                "room": 3,
                "time": "10:05-11:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Tiark Rompf",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Workshop or Sponsor",
                "room": 4,
                "time": "10:05-11:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": []
            },
            {
                "type": "track",
                "title": "Scala.js: what has it become and how is it used in the wild?",
                "room": 1,
                "time": "11:05-12:00",
                "description": "\n\n<p>Since Scala.js' first announcement at Scala Days NYC last year, we have made a lot of progress, and a community has been building around it. With two core developers, several active contributors, people giving talks about it in several conferences around the world, and a few tens of enthusiasts writing toy apps and even cross-compiling libraries, Scala.js is definitely gaining traction.</p>\n<p>In this talk, we will give a survey of some exciting new features of Scala.js, as well as projects from the community. We will end the talk with maybe the craziest of them: a chat application written entirely in Scala+Akka, both on the Play server and on the client, with transparent communication between the two via message passing between actors.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Sébastien Doeraene",
                        "avatar": "",
                        "company": "EPFL",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Building a Reactive Application",
                "room": 2,
                "time": "11:05-12:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Duncan DeVore",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Yin-Yang: Programming DSLs Made Simple",
                "room": 3,
                "time": "11:05-12:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@vojjov",
                        "fullname": "Vojin Jovanovic",
                        "avatar": "assets/images/speakers/jovanovic.jpg",
                        "company": "EPFL",
                        "bio": "Vojin is passionate about making DSLs user-friendly and using generative programming to develop high-performance database systems."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Scala in Numbers - The Ecosystem Census",
                "room": 4,
                "time": "11:05-12:00",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Johannes Rudolph",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "pause",
                "style": "eat",
                "title": "Lunch",
                "time": "12:00-13:00",
                "extra": ""
            },
            {
                "type": "track",
                "title": "Futures and Async: When to Use Which?",
                "room": 1,
                "time": "13:00-13:55",
                "description": "\n\n<p>Async is a new Scala module designed to simplify non-blocking concurrency using futures. At first glance, Async appears to be yet another option to do concurrent or parallel programming in Scala, besides actors, futures, and parallel collections. This talk attempts to provide simple and clear guidelines on when to use futures and when to use Async. Concrete real-world examples will shed light on the relationship between futures and Async and their synergy. By showing the idiomatic use of futures and Async, the talk aims to simplify the choice of concurrency constructs in Scala.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Philipp Haller",
                        "avatar": "",
                        "company": "Typesafe Inc",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Customizable code generation and other Slick 2 features",
                "room": 2,
                "time": "13:00-13:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@cvogt",
                        "fullname": "Jan Christopher Vogt",
                        "avatar": "assets/images/speakers/vogt.jpg",
                        "company": "EPFL",
                        "bio": "Jan Christopher Vogt is a Software Engineer in the Scala team working on Typesafe's & EFPL's Slick."
                    }
                ]
            },
            {
                "type": "track",
                "title": "What’s in your pocket? The state of the art in Android programming with Scala",
                "room": 3,
                "time": "13:00-13:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@stanchme",
                        "fullname": "Nick Stanchenko",
                        "avatar": "assets/images/speakers/nick.jpg",
                        "company": "",
                        "bio": "Nick is a Scala enthusiast, studying and researching HCI at the University of Lisbon. He is the creator of Macroid — the Android Scala DSL."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Git Going Faster... with Scala",
                "room": 4,
                "time": "13:00-13:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Roberto Tyley",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Scala: The First Ten Years",
                "room": 1,
                "time": "14:00-14:55",
                "description": "\n\n<p>Scala has come a long way since the summer of '04, when Miles and Jon first ran scalac. This year celebrates the ten-year anniversary of Scala's first public release, and to celebrate the occasion, we will relive some of the highlights of the last decade, taking an archaeological rummage through mailing list archives, commit messages, bug reports and some old-fashioned Scala code, semicolons and all!</p>\n<p>In this lighthearted trip into Scala's past, we look at everything that's changed about the language since 2004, and with help from some special guests, will attempt to fight the bitrot with a vintage live-coding session on Scala version 1.3!</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Jon Pretty",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    },
                    {
                        "twitter": "",
                        "fullname": "Miles Sabin",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "A whirlwind tour of specs2 2.x",
                "room": 2,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Eric Torreborre",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "How to manage large amounth of data with Iteratee",
                "room": 3,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Quentin ADAM",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Sponsor",
                "room": 4,
                "time": "14:00-14:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": []
            },
            {
                "type": "track",
                "title": "Easy Metaprogramming For Everyone!",
                "room": 1,
                "time": "15:00-15:55",
                "description": "\n\n<p>Scala 2.10 has seen a flurry of macro flavors: def macros, implicit macros, untyped macros, type macros and more recently macro annotations. These flavors have brought a lot of feedback, and we've been thinking hard how to make sense of it.</p>\n<p>At this point it is clear that macros are useful. However there's still quite some work to be done in order to make macros enjoyable. The main issues that remain to be addressed are verbosity and complexity of the underlying API, difficulties with tool integration, and potential for confusion caused by leaking compiler internals and cryptic error messages.</p>\n<p>The goal of Project Palladium is to make macros as natural and as universal as typed functions: simple to write, simple to use, and simple to reason about. Towards that end, we have rethought our macro engine and the underlying reflection API, keeping existing functionality in place and at the same time fixing fundamental problems intrinsic to the original implementation.</p>\n<p>In this talk I will present our results, showing how easy it is to metaprogram with Palladium, and outline the place of our developments in the future of Scala.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@xeno_by",
                        "fullname": "Eugene Burmako",
                        "avatar": "",
                        "company": "EPFL",
                        "bio": "Programming languages enthusiast, PhD student at EPFL, member of Scala team, Scala macros guy."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Forgotten Heroes: Less Fashionable Patterns in Scala",
                "room": 2,
                "time": "15:00-15:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Dick Wall",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Testing Stateful Systems with ScalaCheck",
                "room": 3,
                "time": "15:00-15:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "fullname": "Rickard Nilsson",
                        "avatar": "assets/images/speakers/nilsson.jpg",
                        "company": "",
                        "bio": "Rickard is a freelance programmer and sysadmin, interested in declarative development and deployment. He is the creator of ScalaCheck."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Meet parboiled2 – A Macro-Based PEG Parser Generator for Scala 2.10.3+",
                "room": 4,
                "time": "15:00-15:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Alexander Myltsev",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Rethinking the debugger",
                "room": 1,
                "time": "16:00-16:55",
                "description": "\n\n<p>New abstractions for concurrency make writing programs easier by moving away from threads and locks, but debugging such programs becomes harder. The call-stack, an essential tool in understanding why and how control flow reached a certain point in the program, loses meaning when inspected in traditional debuggers. Futures, actors or iteratees make code easier to write and reason about, and in this talk I'll show a simple solution to make them easier to debug. The tool I present integrates well with the Eclipse plugin for Scala, and shows how a \"reactive debugger\" might look like.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@jaguarul",
                        "fullname": "Iulian Dragos",
                        "avatar": "",
                        "company": "Typesafe",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Enterprise brownfield: Scala to the rescue",
                "room": 2,
                "time": "16:00-16:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@johofer",
                        "fullname": "Joachim Hofer",
                        "avatar": "assets/images/speakers/hofer.jpg",
                        "company": "imbus",
                        "bio": "Joachim Hofer is lead developer at imbus, Scala enthusiast, and active contributor to Open Source."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Miniboxing: Specialization on a Diet",
                "room": 3,
                "time": "16:00-16:55",
                "description": "\n\n<p>Integer a feugiat erat. No bio. Pellentesque at odio sit amet quam porttitor pharetra ac in nunc. Aenean est risus, cursus vitae lacus a, viverra vehicula nisl. Etiam aliquet, turpis accumsan tristique hendrerit, felis nisi condimentum lacus, sit amet elementum nisl eros non erat. Proin sed convallis mauris. In suscipit ultrices mollis.</p>\n            ",
                "speakers": [
                    {
                        "twitter": "@VladUreche",
                        "fullname": "Vlad Ureche",
                        "avatar": "assets/images/speakers/ureche.jpg",
                        "company": "EPFL",
                        "bio": "PhD student at EPFL, in the Scala Lab. Working on transforming programs to efficient bytecode. Specialist in Scala specialization."
                    }
                ]
            },
            {
                "type": "track",
                "title": "Laugh, Then Learn: Scala Puzzlers Returns!",
                "room": 4,
                "time": "16:00-16:55",
                "description": "\n\n<p>Scala Puzzlers returns with a twist: not only will we be presenting a brand new set of puzzlers for Scala 2.11 that will challenge you with unexpected and unintuitive behavior and help you learn something about your favorite language in the process.</p>\n<p>This time, we've added a key set of tips and recommendations to help you avoid these pitfalls when real deadlines are at stake. That's not the time for head-scratching - better to laugh and learn at ScalaDays 2014!</p>\n            ",
                "speakers": [
                    {
                        "twitter": "",
                        "fullname": "Nermin Serifovic",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    },
                    {
                        "twitter": "",
                        "fullname": "Andrew Phillips",
                        "avatar": "",
                        "company": "",
                        "bio": "No bio."
                    }
                ]
            },
            {
                "type": "pause",
                "style": "",
                "title": "Closing Panel and Thank You",
                "time": "17:00-18:00",
                "extra": ""
            }
        ]
    }
}